name: Provision and Deploy Application Manually

on:
  workflow_dispatch:

jobs:
  provision-terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      env:
        TF_VAR_os_auth_url: ${{ secrets.OS_AUTH_URL }}
        TF_VAR_os_user_name: ${{ secrets.OS_USERNAME }}
        TF_VAR_os_password: ${{ secrets.OS_PASSWORD }}
        TF_VAR_os_region_name: ${{ secrets.OS_REGION_NAME }}
        TF_VAR_os_tenant_name: ${{ secrets.OS_PROJECT_NAME }}
        TF_VAR_os_user_domain_name: ${{ secrets.OS_USER_DOMAIN_NAME }}
        TF_VAR_name: "chatbot-instance"
        TF_VAR_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
      run: terraform init
      working-directory: terraform

    - name: Terraform Plan
      env:
        TF_VAR_os_auth_url: ${{ secrets.OS_AUTH_URL }}
        TF_VAR_os_user_name: ${{ secrets.OS_USERNAME }}
        TF_VAR_os_password: ${{ secrets.OS_PASSWORD }}
        TF_VAR_os_region_name: ${{ secrets.OS_REGION_NAME }}
        TF_VAR_os_tenant_name: ${{ secrets.OS_PROJECT_NAME }}
        TF_VAR_os_user_domain_name: ${{ secrets.OS_USER_DOMAIN_NAME }}
        TF_VAR_name: "chatbot-instance"
        TF_VAR_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
      run: terraform plan
      working-directory: terraform

    - name: Terraform Apply
      env:
        TF_VAR_os_auth_url: ${{ secrets.OS_AUTH_URL }}
        TF_VAR_os_user_name: ${{ secrets.OS_USERNAME }}
        TF_VAR_os_password: ${{ secrets.OS_PASSWORD }}
        TF_VAR_os_region_name: ${{ secrets.OS_REGION_NAME }}
        TF_VAR_os_tenant_name: ${{ secrets.OS_PROJECT_NAME }}
        TF_VAR_os_user_domain_name: ${{ secrets.OS_USER_DOMAIN_NAME }}
        TF_VAR_name: "chatbot-instance"
        TF_VAR_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
      run: terraform apply -auto-approve
      working-directory: terraform
    
    - name: Save Instance IP
      id: save_ip
      run: |
        vars.INSTANCE_IP=$(terraform output -raw instance_ip)
      working-directory: terraform

    - name: Update DNS Record
      env:
        USERNAME: ${{ secrets.DNS_USERNAME }}
        PASSWORD: ${{ secrets.DNS_PASSWORD }}
        ID: ${{ secrets.DNS_ID }}
        IP: ${{ vars.INSTANCE_IP }}
      run: |
        curl -X POST "https://cp.dnsmadeeasy.com/servlet/updateip?username=${USERNAME}&password=${PASSWORD}&id=${ID}&ip=${IP}"

    - name: Save Terraform State
      if: github.event.inputs.terraform_apply == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-state
        path: terraform/terraform.tfstate
        retention-days: 90

  ansible-deploy:
    needs: provision-terraform
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install Ansible
      run: sudo apt-get update && sudo apt-get install -y ansible

    - name: Run Ansible Playbook
      uses: dawidd6/action-ansible-playbook@v2
      with:
        playbook: ansible/playbook/deploy.yml
        inventory: |
          [app]
          ${{ vars.INSTANCE_IP }} ansible_user=${{ secrets.USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        options: --extra-vars "openai_api_key=${{ secrets.OPENAI_API_KEY }} postgres_user=${{ secrets.POSTGRES_USER }} postgres_password=${{ secrets.POSTGRES_PASSWORD }} postgres_db=${{ secrets.POSTGRES_DB }} ngrok_auth_token=${{ secrets.NGROK_AUTH_TOKEN }} public_ip=${{ vars.INSTANCE_IP }}"